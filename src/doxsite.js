'use strict';

import apiloader from './classes/apiloader.js';
import docbuildertemplates from './classes/docbuildertemplates.js';
import docbuilder from './classes/docbuilder.js';
import shell from 'shelljs';

export const APILoader = apiloader;
export const DocBuilderTemplates = docbuildertemplates;
export const DocBuilder = docbuilder;

export class Doxsite
{
	/** @type {String} Path to the Doxyfile. */

	doxyfile = null;

	/** @type {String} Path to XML generated by Doxygen. Output location is defined by the `OUTPUT_DIRECTORY` and `XML` options in the Doxyfile. */

	xmlPath = null;

	/** @type {String} Filename for of the index xml file generated by Doxygen. Located in the `xmlPath` folder. */

	xmlIndexFile = 'index.xml';

	/** @type {DocBuilderTemplates} Templates used to generate documentation files. */

	templates = null;

	/** @type {String} Path the documentation files are written to. */

	outputPath = null;

	/** @type {String} File extension documentation files use, typically html, but could also be php. */

	outputFileExtension = 'html';

	/** @type {String} URL path to the documentation site root on the server/hosting environment. */

	urlRootPath = '/';

	/** @type {String} Relative path from `urlRootPath` to the documentation files. */

	apiSubPath = 'API';

	#apiLoader = null;
	#docBuilder = null;

	/**
	 * Build the documentation site, optionally re-running doxygen first.
	 * @param {Boolean} runDoxygen Should doxygen run before creating the site?
	 */

	build(runDoxygen, parseXML)
	{
		runDoxygen = (runDoxygen == undefined) ? true : runDoxygen;
		parseXML = (runDoxygen || parseXML);

		if (runDoxygen)
		{
			this.runDoxygen();
		}

		if (parseXML)
		{
			this.parseXML();
		}

		this.buildDocs();
	}

	/** Shortcut method to run Doxygen using the Doxyfile associated with this Doxsite object. */

	runDoxygen()
	{
		console.log('Run doxygen...');
		shell.exec('doxygen ' + this.doxyfile);
		console.log('Doxygen complete!');
	}

	/** Parse xml previously generated by Doxygen. */

	parseXML()
	{
		console.log('Parse XML...');

		if (!this.#apiLoader)
		{
			this.#apiLoader = new APILoader();
		}

		this.#apiLoader.xmlPath = this.xmlPath;
		this.#apiLoader.xmlIndexFile = this.xmlIndexFile;
		this.#apiLoader.addEventListener('loaded', (evt) => { console.log('API loaded!', evt); });
		this.#apiLoader.load();

		console.log('XML parsed!');
	}

	/**
	 * Build documentation files using previously generated and parsed xml from Doxygen. This method can be re-run on its own after modifiying
	 * template files to cut down on iteration time.
	 */

	buildDocs()
	{
		console.log('Build docs...');

		if (!this.#docBuilder)
		{
			this.#docBuilder = new DocBuilder();
		}

		this.#docBuilder.namespaces = this.#apiLoader.namespaces;
		this.#docBuilder.definitions = this.#apiLoader.definitions;
		this.#docBuilder.templates = this.templates;
		this.#docBuilder.outputPath = this.outputPath;
		this.#docBuilder.outputFileExtension = this.outputFileExtension;
		this.#docBuilder.urlRootPath = this.urlRootPath;
		this.#docBuilder.apiSubPath = this.apiSubPath;
		this.#docBuilder.addEventListener('complete', (evt) => { console.log('Doc build complete!', evt); });
		this.#docBuilder.buildDocs();

		console.log('Docs built!');
	}

	/**
	 * Create a new project at a specified path. Creates a 'doxygen' folder containing a Doxyfile and XML folder for Doxygen output, and a 'develop'
	 * folder for the site with a default stylesheet.
	 * @param {String} projectPath Path to create the project at.
	 */

	static createProject(projectPath)
	{
		// TODO
		console.log('import.meta.url', import.meta.url);
	}
}